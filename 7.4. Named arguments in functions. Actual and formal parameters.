# Подвиг 2. Объявите функцию с именем get_rect_value, которая принимает два аргумента (два числа) и еще один формальный
# параметр type с начальным значением 0. Если параметр type равен нулю, то функция должна возвращать периметр
# прямоугольника, а иначе - его площадь.
# P. S. Вызывать функцию не нужно, только объявить.

#def get_rect_value (a,b, type = 0):
 #   if type == 0:
  #      return (a+b)*2
   # return a*b


# Подвиг 3. Объявите функцию с именем check_password, которая принимает аргумент - строку (пароль) и имеет один
# формальный параметр chars с начальным значением в виде строки "$%!?@#". Функция должна проверять: есть ли в пароле
# хотя бы один символ из chars и что длина пароля не менее 8 символов. Если проверка проходит, то функция возвращает
# True, иначе - False.

#P. S. Вызывать функцию не нужно, только объявить.
#Sample Input:
#12345678!
#Sample Output:
#True

# Решение:

#def check_password (a, chars = '$%!?@#'):
 #   if len(set(a)&set(chars))>0 and len(a) >= 8:
  #      return True
   # else:
    #    return False

#Подвиг 4. Объявите функцию, которая принимает строку на кириллице и преобразовывает ее в латиницу,
# используя следующий словарь для замены русских букв на соответствующее латинское написание:
#t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
 #    'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
  #   'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
   #  'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
#Функция должна возвращать преобразованную строку. Замены делать без учета регистра
# (исходную строку перевести в нижний регистр - малые буквы). У функции также определить формальный параметр sep
# с начальным значением в виде строки "-". Он будет определять символ для замены пробелов в строке.
#После объявления функции прочитайте (с помощью функции input) строку и дважды вызовите функцию
# (с выводом результата ее работы на экран):
#- первый раз только со строкой
#- второй раз со строкой и именованным аргументом sep со значением '+'.
#Sample Input:
#Лучший курс по Python!
#Sample Output:
#luchshiy-kurs-po-python!
#luchshiy+kurs+po+python!

#Решение:

# Variant1:
#def p_st(st, sep = "-"):
 #   res = []
  #  t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
   #  'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
    #'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
    #'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya', 'q': 'q', 'w': 'w', 'e': 'e',
     #    'r': 'r',
      #   't': 't', 'y': 'y', 'u': 'u', 'i': 'i', 'o': 'o', 'p': 'p', 'a': 'a', 's': 's', 'd': 'd', 'f': 'f', 'g': 'g', 'h': 'h', 'j': 'j', 'k': 'k', 'l': 'l', 'z': 'z', 'x': 'x', 'c': 'c', 'v': 'v', 'b': 'b', 'n': 'n', 'm': 'm',
#' ': ' ', '!': '!'}
 #   st = st.lower()
  #  for a in st:
   #     if a == " ":
    #        res.append(sep)
     #   else:
      #      res.append(t.get(a))
    #res = "".join(res)
    #return res
#a = input()
#print(p_st(a))
#print(p_st(a, sep = "+"))

# Variant2:
#def kir_lat(st, sep='-'):
 #   lst = ''.join([t[i] if i in t else i for i in st ]).replace(' ', sep)
  #  return lst


#st = input().lower()
#print(kir_lat(st))
#print(kir_lat(st, sep='+'))

# Подвиг 5. Объявите функцию, которая принимает строку и заключает ее в указанный тег.
# Тег определяется формальным параметров tag с начальным значением в виде строки "h1". Например, мы передаем строку
# "Hello Python" и заключаем в тег "h1". На выходе должны получить строку (без кавычек):
#"<h1>Hello Python</h1>"
#То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. И так для любых указанных тегов.
#После объявления функции прочитайте (с помощью функции input) строку и дважды вызовите функцию
# (с выводом результата ее работы на экран):
#- первый раз только со строкой
#- второй раз со строкой и именованным аргументом tag со значением 'div'.
#Sample Input:
#Работаем с функциями
#Sample Output:
#<h1>Работаем с функциями</h1>
#<div>Работаем с функциями</div>

# Решение:
#def to_translate (a, tag = 'h1'):
#   return (f"<{tag}>{a}</{tag}>")


#print(to_translate(input()))
#print(to_translate(input(), tag = 'div'))

# Подвиг 6. Функции из предыдущего подвига 5 добавьте еще один формальный параметр up с начальным булевым значением True.
# Если параметр up равен True, то тег (указанный в формальном параметре tag) следует записывать заглавными буквами, а иначе - малыми.
# После объявления функции прочитайте (с помощью функции input) строку и дважды вызовите функцию (с выводом результата ее работы на экран):
# - первый раз со строкой и именованным аргументом tag со значением 'div'
# - второй раз со строкой, именованным аргументом tag со значением 'div' и именованным аргументом up со значением False.
# Sample Input:
# Python is best!
# Sample Output:
# <DIV>Python is best!</DIV>
# <div>Python is best!</div>

# Решение:
#def to_translate (a, tag = 'h1', up = True):
 #  tag = (tag.upper() if up==True else tag.lower())
  # return (f"<{tag}>{a}</{tag}>")


#a = input()
#print(to_translate(a, tag = 'div'))
#print(to_translate(a, tag = 'div', up = False))
