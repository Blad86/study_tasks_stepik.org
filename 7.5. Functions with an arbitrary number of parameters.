#Подвиг 3. Объявите функцию с именем get_even, которая принимает произвольное количество чисел в качестве аргументов и
# возвращает список, составленный только из четных переданных значений.
# Функцию выполнять не нужно, только определить.
# Sample Input:
#45 4 8 11 12 0
#Sample Output:
#4 8 12 0

# Решение:

#def get_even (*args):
 #  lst = [i for i in args if i%2==0]
  # return lst

#print(*get_even(*list(map(int,input().split()))))

#Подвиг 4. Объявите функцию с именем get_biggest_city, которой можно передавать произвольное количество названий
# городов через аргументы. Данная функция должна возвращать название города наибольшей длины.
# Если таких городов несколько, то первый найденный (из наибольших). Программу реализовать без использования сортировки.
#Функцию выполнять не нужно, только определить.
#Sample Input:
#Питер Москва Самара Воронеж
#Sample Output:
#Воронеж

#def get_biggest_city (*a):
 #  return max(a, key=len)


#print(get_biggest_city(*list(map(str,input().split()))))

#Подвиг 5. Объявите функцию с именем get_data_fig для вычисления периметра произвольного N-угольника.
# На вход этой функции передаются N длин сторон через аргументы. Дополнительно могут быть указаны именованные аргументы:

#type - булево значение True/False
#color - целое числовое значение
#closed - булево значение True/False
#width - целое значение
#Функция должна возвращать в виде кортежа периметр многоугольника и указанные значения именованных параметров в порядке
# их перечисления в тексте задания (если они были переданы). Если какой-либо параметр отсутствует, его возвращать не
# нужно (пропустить).
#Функцию выполнять не нужно, только определить.

#def get_data_fig(*args, **kwargs):
 #  s = sum(args)
  # d = {'s': s, 'type': None, 'color': None, 'closed': None, 'width': None}
   #for i in kwargs:
    #  d[i] = kwargs[i]
   #lst = []
   #for j in d.values():
    #  if j != None:
     #    lst.append(j)
   #return tuple(lst)
