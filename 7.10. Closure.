# Замыкания.

# Подвиг 1. Используя замыкания функций, определите вложенную функцию, которая бы увеличивала значение переданного
# параметра на 5 и возвращала бы вычисленный результат. При этом внешняя функция должна иметь следующую сигнатуру:
# def counter_add(): ...
# Вызовите функцию counter_add и результат ее работы присвойте переменной с именем cnt.
# Вызовите внутреннюю функцию через переменную cnt со значением k, введенным с клавиатуры:
# k = int(input())
# Выведите результат на экран.
#Sample Input:
#7
#Sample Output:
#12

# Решение:
#k = int(input())


#def counter_add(k):
 #   def counter_add1(n):
  #      return k+5

   # return counter_add1


#cnt = counter_add(k)
#print(cnt(k))

#Подвиг 2. Используя замыкания функций, объявите внутреннюю функцию, которая увеличивает значение своего аргумента
# на некоторую величину n - параметр внешней функции с сигнатурой:
#def counter_add(n): ...
#Вызовите внешнюю функцию counter_add со значением аргумента 2 и результат присвойте переменной cnt.
# Вызовите внутреннюю функцию через переменную cnt со значением k, введенным с клавиатуры:
#k = int(input())
#Выведите результат на экран.
#Sample Input:
#5
#Sample Output:
#7

# Решение:
#k = int(input())
#def counter_add(n):
 #   def func1(k):
  #      return k+n

   # return func1


#cnt = counter_add(2)
#print(cnt(k))

#Подвиг 3. Используя замыкания функций, объявите внутреннюю функцию, которая заключает в тег h1 строку s
# (s - строка, параметр внутренней функции). Далее, на вход программы поступает строка и ее нужно поместить в тег h1
# с помощью реализованного замыкания. Результат выведите на экран.
#P. S. Пример добавления тега h1 к строке "Python": <h1>Python</h1>
#Sample Input:
#Balakirev
#Sample Output:
#<h1>Balakirev</h1>

# Решение:
#k = str(input())


#def func1(k):
 #   def funk2(s):
  #      s = f'<h1>{k}</h1>'
   #     return s

    #return funk2


#tag = func1(k)
#print(tag(k))

#Подвиг 4. Используя замыкания функций, объявите внутреннюю функцию, которая заключает строку s
# (s - строка, параметр внутренней функции) в произвольный тег, содержащийся в переменной tag - параметре внешней
# функции. Далее, на вход программы поступают две строки: первая с тегом, вторая с некоторым содержимым.
# Вторую строку нужно поместить в тег из первой строки с помощью реализованного замыкания. Результат выведите на экран.
#P. S. Пример добавления тега h1 к строке "Python": <h1>Python</h1>
#Sample Input:
#div
#Сергей Балакирев
#Sample Output:
#<div>Сергей Балакирев</div>

#tag = input()
#N = input()
#def func1(tag):
 #   def func2(s):
  #      s = f'<{tag}>{N}</{tag}>'
   #     return s

    #return func2


#do_tag = func1(tag)
#print(do_tag(tag))

#Подвиг 5. Используя замыкания функций, объявите внутреннюю функцию, которая преобразует строку из списка целых чисел,
# записанных через пробел, либо в список, либо в кортеж. Тип коллекции определяется параметром tp внешней функции.
# Если tp = 'list', то используется список, иначе (при другом значении) - кортеж.
#Далее, на вход программы поступают две строки: первая - это значение для параметра tp; вторая - список целых чисел,
# записанных через пробел. С помощью реализованного замыкания преобразовать эти данные в соответствующую коллекцию.
# Результат вывести на экран командой (lst - ссылка на коллекцию):
#print(lst)
#Sample Input:
#list
#-5 6 8 11 0 111 -456 3
#Sample Output:
#[-5, 6, 8, 11, 0, 111, -456, 3]

# Решение:
#tp = input()
#lst = input().split()


#def func1(tp):
 #   def func2(s):
  #      s = f'tp({lst})'
   #     return s

    #return func2


#exe = func1(lst)
#print(exe)

#def foo(tp):
 #   tp = str1
  #  def inner(s):
   #     if tp == 'list':
    #        return list(map(int, s.split()))
     #   else:
      #      return tuple(map(int, s.split()))

    #return inner


#str1 = input()
#str2 = input()
#b = foo(str2)
#lst = b(str2)
#print(lst)
