# Подвиг 1. Объявите функцию, которая принимает один аргумент (вещественное число), и возвращает квадрат этого числа.
# После объявления функции прочитайте (с помощью функции input) вещественное число и вызовите функцию с этим значением.
# Выведите на экран результат работы функции.
# Sample Input:
# 1.5
# Sample Output:
# 2.25

# Решение:

#def xx (a):
#    return a**2


#print(xx(float(input())))

# Подвиг 2. Объявите функцию с именем is_triangle, которая принимает три стороны треугольника (целые числа) и проверяет,
# можно ли из переданных аргументов составить треугольник. (Напомню, что у любого треугольника длина третьей стороны
# всегда должна быть меньше суммы двух других). Если  проверка проходит, вернуть булево значение True, иначе - значение
# False.
# Вызывать функцию не нужно, только задать.
# Sample Input:
# 3 4 5
# Sample Output:
# True

# Решение:

# Variant1

# #def is_triangle (a,b,c):
 #   if a<(b+c) and b<(a+c) and c<(a+b):
  #      return True
   # else:
    #    return False

#Variant2

#def is_triangle(a, b, c):
 #   return a + b > c and a + c > b and b + c > a


# Подвиг 3. Объявите функцию с именем is_large, которая принимает строку (в качестве аргумента) и возвращает False,
# если длина строки меньше трех символов. Иначе возвращается значение True.
# Вызывать функцию не нужно, только объявить.
# Sample Input:
# Я люблю Python!
# Sample Output:
# True

#Решение:

#def is_large (a):
 #   return len(a)>=3


#print(is_large('sd'))

# Подвиг 4. Объявите функцию для проверки числа на четность (возвращается True, если переданное число четное и False,
# если число нечетное).
# После объявления функции в цикле необходимо считывать целое числовое значение (функцией input),
# пока не поступит число 1. Если прочитанное значение четное (проверяется с помощью заданной функции),
# то оно выводится на экран (в столбик, то есть, каждое значение с новой строки).
# Sample Input:
# 2
# -4
# 5
# 7
# 10
# 1
#Sample Output:
# 2
# -4
# 10

#def check (a):
 #   return a%2==0


#a = 0
#while a != 1:
 #   a = int(input())
  #  if check(a) == True:
   #     print(a)

# Подвиг 5. Объявите функцию для проверки числа на нечетность (возвращается True, если переданное число нечетное и
# False, если число четное).
# После объявления функции прочитайте (с помощью функции input) список целых значений, записанных в одну строку через
# пробел. И, используя генератор списков и созданную функцию, сформируйте список из нечетных значений на основе
# введенного исходного списка. Результат отобразите на экране командой:
# print(*lst)
# где lst - сформированный список из нечетных значений.
# Sample Input:
# 8 11 -15 3 2 10
# Sample Output:
# 11 -15 3

# Решение:

#def check (a):
 #   return a % 2 == 0


#lst_0 = list(map(int,input().split()))
#lst = [i for i in lst_0 if not check(i)]
#print(*lst)

# Подвиг 6. Вводится слово в переменную tp. Если это слово RECT, то следует объявить функцию с именем get_sq
# с двумя параметрами, вычисляющую площадь прямоугольника и возвращающую вычисленное значение.
# (На экран она ничего не должна выводить, только возвращать значение).
# Если же введенное слово не RECT (любое другое), то объявляется функция с тем же именем get_sq, с одним параметром
# для вычисления площади квадрата (формула: a*a). Вычисленное значение возвращается функцией.
# (Она также ничего не выводит на экран).
# Примечание: в программе должна быть задана только одна функция с именем get_sq в зависимости от введенного слова.
# Вызывать функцию не нужно, только объявлять.
# Sample Input:
# RECT
# Sample Output:
# 10

# Решение:

#tp = input().strip()
#if tp == 'RECT':
 #   def get_sq (a,b):
  #      return a*b


#else:
 #   def get_sq (a):
  #      return a*a

# Подвиг 7. Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает False,
# если длина строки меньше 6 символов. Иначе возвращается значение True.
# После объявления функции прочитайте (с помощью функции input) список названий городов, записанных в одну строку
# через пробел. Затем, используя генератор списка и созданную функцию, сформируйте список из названий городов длиной
# не менее шести символов на основе введенного исходного списка. Результат отобразите на экране командой:
# print(*lst)
# где lst - итоговый сформированный список.
# Sample Input:
# Москва Уфа Пермь Самара Вологда
# Sample Output:
# Москва Самара Вологда

#def to_do (a):
 #   return len(a)>=6

# Решение:

#lst_0 = list(map(str, input().split()))
#lst = [i for i in lst_0 if to_do(i)]
#print(*lst)

#Подвиг 8. Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает два значения в виде кортежа:
# переданная строка и ее длина.
# После объявления функции прочитайте (с помощью функции input) список названий городов, записанных в одну строку через
# пробел. Затем, используя генератор словарей и созданную функцию, сформируйте словарь d в формате:
# d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
# Выведите этот словарь в порядке возрастания длин строк с помощью команд:
# a = sorted(d, key=lambda x: d[x])
# print(*a)
# P. S. Пока просто запишите эти команды. Как они работают станет ясно позже, когда мы подробнее изучим функции сортировки и работу оператора *.
# Sample Input:
# Воронеж Лондон Тверь Омск Уфа
# Sample Output:
# Уфа Омск Тверь Лондон Воронеж

# Решение:

#def to_do (strg):
 #   return strg,len(strg)


#lst_0 = input().split()
#d = {to_do(a)[0]: to_do(a)[1] for a in lst_0}
#a = sorted(d, key=lambda x: d[x])
#print(*a)

# Подвиг 9. Вводится список целых чисел в одну строчку через пробел.
# Необходимо задать функцию, которая принимает два аргумента (максимальное и минимальное значения из списка)
# и возвращает их произведение. Вызовите эту функцию и отобразите на экране полученное числовое значение.
# Подсказка: для передачи аргументов функции используйте функции max и min для введенного списка чисел.
# Sample Input:
# 56 34 -30 22 1 4 10
# Sample Output:
# -1680

# Решение:

#lst = list(map(int, input().split()))
#def to_do (x):
 #   a,b = max(lst),min(lst)
  #  return a*b


#print(to_do(lst))
