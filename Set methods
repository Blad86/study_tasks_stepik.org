# SET (Множества)

# Подвиг 3. Вводятся вещественные числа в одну строчку через пробел. Необходимо на их основе сформировать множество s.
# Подсказка: множество можно создать по аналогии со списком:
# list(map(float, <список из строк чисел>))
# Вывести на экран значения множества s в порядке возрастания в одну строчку через пробел, используя команду:
# print(*sorted(s))
# P. S. О функции sorted мы еще будем говорить, а также об операторе *. Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.
# Sample Input:
# -5.1 -3.0 7.6 10.3 -4.6 2.78
# Sample Output:
# -5.1 -4.6 -3.0 2.78 7.6 10.3

# Решение:
# s = set(map(float, input().split()))
# print(*sorted(s))

# Подвиг 4. Вводится текст в одну строку, слова разделены пробелом.
# Необходимо подсчитать число уникальных слов (без учета регистра) в этом тексте.
# Результат (число уникальных слов) вывести на экран.
# Sample Input:
# Мама мыла раму а потом мыла кота и еще мыла пол
# Sample Output:
# 9

# Решение:

# string = list(map(str, input().lower().split()))
# print(len(set(string)))

# Подвиг 5. Вводится строка, содержащая латинские символы, пробелы и цифры.
# Необходимо выделить из нее все неповторяющиеся цифры (символы от 0 до 9) и
# вывести на экран в одну строку через пробел их в порядке возрастания значений.
# Если цифры отсутствуют, то вывести слово НЕТ.
# Sample Input:
# Python 3.9.11 - best language!
# Sample Output:
# 1 3 9

# Решение:

#a = input()
#res = []
#for b in a:
 #   if b.isdigit() == False:
  #      continue
   # elif b not in res:
    #    res.append(b)
# if len(res) <= 0:
  #  print("НЕТ")
# else:
  #  print(" ".join(sorted(res)))

# Подвиг 6. В ночном клубе фиксируется список гостей. Причем гости могут выходить из помещения, а затем, снова заходить.
# Тогда их имена фиксируются повторно. На вход программы поступает такой список (каждое имя записано с новой строки).
# Требуется подсчитать общее число гостей, которые посетили ночной клуб. Полагается, что гости имеют уникальные имена.
# На экран вывести общее число гостей клуба.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# Sample Input:
# Мария
# Елена
# Екатерина
# Александр
# Елена
# Мария
# Sample Output:
# 4

# Решение:

# import sys
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# print (len(set(lst_in)))

# Подвиг 7. В аккаунте youtube Сергея прокомментировали очередное видео. Некоторые посетители оставляли несколько комментариев. Требуется по списку комментариев определить уникальное число комментаторов. Комментарии поступают на вход программы в формате:
# имя 1: комментарий 1
# имя 2: комментарий 2
# ...
# имя N: комментарий N
# Также полагается, что имена у разных комментаторов не совпадают. Вывести на экран общее число уникальных комментаторов.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# Sample Input:
# EvgeniyK: спасибо большое!
# LinaTroshka: лайк и подписка!
# Sergey Karandeev: крутое видео!
# Евгений Соснин: обожаю
# EvgeniyK: это повтор?
# Sergey Karandeev: нет, это новое видео
# Sample Output:
# 4

# Решение:

# import sys
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# res = []
# for a in lst_in:
  #  if a.split(":")[0] not in res:
   #     res. append(a.split(":")[0])
# print(len(res))

# Подвиг 8. Пользователь с клавиатуры вводит названия городов, пока не введет букву q.
# Определить общее уникальное число городов, которые вводил пользователь. На экран вывести это число.
# Из коллекций при реализации программы использовать только множества.
# Sample Input:
# Уфа
# Москва
# Тверь
# Екатеринбург
# Томск
# Уфа
# Москва
# q
# Sample Output:
# 5

# Решение:

#n=input()
#x=set()
#while n!='q':
 #         x.add(n)
  #        n=input()
#print(len(x))
#***********************************************************************************************************************

# Операции с множествами


# Подвиг 1. Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие и в первом и во втором списках одновременно.
# Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел, используя команду (здесь s - это множество):
# print(*sorted(s))
# P. S. О функции sorted мы еще будем говорить, а также об операторе *. Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.
# Sample Input:
# 8 11 12 15 -2
# 4 11 10 15 -5 1 -2
# Sample Output:
# -2 11 15

# Решение:

# set1 = set(map(int, input().split()))
# set2 = set(map(int, input().split()))
# print(*sorted(set1&set2))

# Подвиг 2. Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом списке, но отсутствующие во втором.
# Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел.

#Sample Input:
# 8 5 3 5 -3 1
# 1 2 3 4
# Sample Output:
# -3 5 8

# Решение:
# set1 = set(map(int, input().split()))
# set2 = set(map(int, input().split()))
# print(*sorted(set1-set2))

# Подвиг 3. Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом или втором списках,
# но отсутствующие одновременно в обоих. Результат выведите на экран в виде строки чисел,
# записанных по возрастанию через пробел.
# Sample Input:
# 1 2 3 4 5
# 4 5 6 7 8
# Sample Output:
# 1 2 3 6 7 8

# Решение:

# Variant1
#set1 = set(map(int, input().split()))
#set2 = set(map(int, input().split()))
#print(*sorted((set1 | set2) - (set1 & set2)))

# Variant2
#set1 = set(map(int, input().split()))
#set2 = set(map(int, input().split()))
#print(*sorted(set1^set2))

# Подвиг 4. Вводятся два списка городов каждый с новой строки (в строке названия через пробел).
# Необходимо сравнить их между собой на равенство по уникальным (не повторяющимся) городам.
# Если списки содержат одни и те же уникальные города, то вывести на экран ДА, иначе - НЕТ.
# Sample Input:
# Москва Тверь Уфа Казань Уфа Москва
# Уфа Тверь Москва Казань
# Sample Output:
# ДА

# Рушение:

#set1 = set(map(str, input().split()))
#set2 = set(map(str, input().split()))
#if len(set1^set2)<1:
 #   print('ДА')
#else:
 #   print('НЕТ')

# Подвиг 5. Вводится список оценок студента - его ответов у доски по предмету "Информатика" в виде чисел от 2 до 5
# в одну строку через пробел. Если студент имеет хотя бы одну двойку, то он не допускается до экзамена.
# Определить на основе введенного списка, допущен ли студент. Если допущен, то вывести слово ДОПУЩЕН, иначе - НЕ ДОПУЩЕН.
# При реализации задачи используйте множество для определения наличия двойки.
# Sample Input:
# 3 4 4 5 2 3
# Sample Output:
# НЕ ДОПУЩЕН

# Решение:

#lst = set(map(int, input().split()))
#set2 = set([2])
#if 2 in lst&set2:
 #   print('НЕ ДОПУЩЕН')
#else:
 #   print('ДОПУЩЕН')

# Подвиг 6. Вводятся два списка городов каждый с новой строки (в строке названия через пробел),
# которые объехал Сергей в 1-й и 2-й годы своего путешествия по России.
# Требуется определить, включал ли его маршрут во 2-й год все города 1-го года путешествия?
# Если это так, то вывести ДА, иначе - НЕТ.
# Sample Input:
# Москва Казань Самара Москва Москва Владимир Новгород Казань Самара Москва
# Sample Output:
# ДА

# Решение:

#set1 = set(map(str, input().split()))
#set2 = set(map(str, input().split()))
#if set2>set1:
 #   print('ДА')
#else:
 #   print('НЕТ')

# Подвиг 7. Вводится натуральное число, которое может быть определено простыми множителями 1, 2, 3, 5 и 7.
# Необходимо разложить введенное число на указанные простые множители и проверить, содержит ли оно множители
# 2, 3 и 5 (все указанные множители)? Если это так, то вывести ДА, иначе - НЕТ.
# Sample Input:
# 210
# Sample Output:
# ДА

# Решение:

#a = {2,3,5}
#n = int(input())
#if n % 30 == 0:
 #   print('ДА')
#else:
 #   print('НЕТ')
